document.addEventListener("DOMContentLoaded", () => {
  const toggleBtn = document.getElementById("themeToggle");
  const body = document.body;

  body.classList.add("light");

  toggleBtn.addEventListener("click", () => {
    if (body.classList.contains("light")) {
      body.classList.replace("light", "dark");
      toggleBtn.textContent = "‚òÄÔ∏è";
    } else {
      body.classList.replace("dark", "light");
      toggleBtn.textContent = "üåô";
    }
  });
});

const form = document.getElementById("taskForm");
const taskList = document.getElementById("taskList");
const completedList = document.getElementById("completedList");

form.addEventListener("submit", (e) => {
  e.preventDefault();

  const text = document.getElementById("taskInput").value.trim();
  const date = document.getElementById("taskDate").value; // –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
  const priority = document.getElementById("prioritySelect").value;

  if (!text) return; // —Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω

  let dateHTML = "";
  if (date) {
    const [datePart, timePart] = date.split("T");
    const formattedTime = timePart ? timePart.slice(0, 5) : ""; // HH:MM
    dateHTML = `<small>${datePart} - ${formattedTime}</small>`;
  }

  const div = document.createElement("div");
  div.className = "task";
  const priorityText = priority.charAt(0).toUpperCase() + priority.slice(1);

  div.innerHTML = `
    <strong>${priorityText}</strong>
    <span>${text}</span>
    ${dateHTML}
    <div class="actions">
      <button class="btn complete-btn">‚úÖ</button>
      <button class="btn delete-btn">üóëÔ∏è</button>
    </div>
  `;

  taskList.appendChild(div);
  form.reset();
});


// –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
document.addEventListener("click", (e) => {
  const task = e.target.closest(".task");
  if (!task) return;

  //–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  if (e.target.classList.contains("complete-btn")) {
    if (task.parentElement.id === "taskList") {
      task.classList.add("completed");
      task.querySelector(".complete-btn").textContent = "‚Ü©Ô∏è";
      completedList.appendChild(task);
    } else {
      task.classList.remove("completed");
      task.querySelector(".complete-btn").textContent = "‚úÖ";
      taskList.appendChild(task);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Å confirm)
  if (e.target.classList.contains("delete-btn")) {
    if (confirm("Delete this task?")) {
      task.remove();
    }
  }
});



// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GO
// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
async function fetchTasks() {
  const res = await fetch("/tasks"); // –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É API
  const tasks = await res.json();
  console.log(tasks);
  renderTasks(tasks);
}

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
async function addTask(taskObj) {
  const res = await fetch("/tasks/add", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(taskObj)
  });
  const data = await res.json();
  console.log(data);
}
